[{"C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\index.js":"1","C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\comments\\Comment.js":"2","C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\comments\\CommentForm.js":"3","C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\App.js":"4","C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\comments\\Comments.js":"5","C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\api.js":"6"},{"size":219,"mtime":1670679882340,"results":"7","hashOfConfig":"8"},{"size":3811,"mtime":1670863366784,"results":"9","hashOfConfig":"8"},{"size":1257,"mtime":1670864554444,"results":"10","hashOfConfig":"8"},{"size":228,"mtime":1670865588021,"results":"11","hashOfConfig":"8"},{"size":2743,"mtime":1670862206411,"results":"12","hashOfConfig":"8"},{"size":799,"mtime":1670864483825,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1999olf",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\index.js",[],"C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\comments\\Comment.js",["27","28"],"import CommentForm from \"./CommentForm\";\nimport { RiQuestionAnswerLine } from \"react-icons/ri\";\nimport { Provider, LikeButton, UpdownButton } from \"@lyket/react\";\n\nconst Comment = ({\n  comment,\n  replies,\n  setActiveComment,\n  activeComment,\n  updateComment,\n  deleteComment,\n  addComment,\n  parentId = null,\n  currentUserId,\n}) => {\n  const isEditing =\n    activeComment &&\n    activeComment.id === comment.id &&\n    activeComment.type === \"editing\";\n  const isReplying =\n    activeComment &&\n    activeComment.id === comment.id &&\n    activeComment.type === \"replying\";\n  const fiveMinutes = 300000;\n  const timePassed = new Date() - new Date(comment.createdAt) > fiveMinutes;\n  const canDelete =\n    currentUserId === comment.userId && replies.length === 0 && !timePassed;\n  const canReply = Boolean(currentUserId);\n  const canEdit = currentUserId === comment.userId && !timePassed;\n  const replyId = parentId ? parentId : comment.id;\n  const createdAt = new Date(comment.createdAt).toLocaleDateString();\n\n  return (\n    <div key={comment.id} className=\"comment\">\n      <div className=\"comment-image-container\">\n        <img src=\"/user-icon.png\" />\n      </div>\n      <div className=\"comment-right-part\">\n        <div className=\"comment-content\">\n          <div className=\"comment-author\">{comment.username}</div>\n          <div className=\"comment-date\">{createdAt}</div>\n        </div>\n        {!isEditing && <div className=\"comment-text\">{comment.body}</div>}\n        {isEditing && (\n          <CommentForm\n            submitLabel=\"Update\"\n            hasCancelButton\n            initialName={comment.body.name}\n            initialText={comment.body.text}\n            handleSubmit={(name, text) => updateComment(name, text, comment.id)}\n            handleCancel={() => {\n              setActiveComment(null);\n            }}\n          />\n        )}\n        <div className=\"comment-actions\">\n          <div className=\"counter\">\n            <Provider apiKey=\"acc0dbccce8e557db5ebbe6d605aaa\">\n              <UpdownButton\n                namespace=\"my-documentation\"\n                id=\"like-dislike-buttons-api\"\n              />\n            </Provider>\n          </div>\n\n          {canReply && (\n            <div\n              className=\"comment-action\"\n              onClick={() =>\n                setActiveComment({ id: comment.id, type: \"replying\" })\n              }\n            >\n              <RiQuestionAnswerLine className=\"reply\" />\n              Reply\n            </div>\n          )}\n          {canEdit && (\n            <div\n              className=\"comment-action\"\n              onClick={() =>\n                setActiveComment({ id: comment.id, type: \"editing\" })\n              }\n            >\n              Edit\n            </div>\n          )}\n          {canDelete && (\n            <div\n              className=\"comment-action\"\n              onClick={() => deleteComment(comment.id)}\n            >\n              Delete\n            </div>\n          )}\n        </div>\n        {isReplying && (\n          <CommentForm\n            submitLabel=\"Reply\"\n            handleSubmit={(name, text) => addComment(name, text, replyId)}\n          />\n        )}\n        {replies.length > 0 && (\n          <div className=\"replies\">\n            {replies.map((reply) => (\n              <Comment\n                comment={reply}\n                key={reply.id}\n                setActiveComment={setActiveComment}\n                activeComment={activeComment}\n                updateComment={updateComment}\n                deleteComment={deleteComment}\n                addComment={addComment}\n                parentId={comment.id}\n                replies={[]}\n                currentUserId={currentUserId}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;\n","C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\comments\\CommentForm.js",[],"C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\App.js",[],"C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\comments\\Comments.js",[],"C:\\Users\\tugba\\Desktop\\projects\\comment-section\\src\\api.js",[],{"ruleId":"29","severity":1,"message":"30","line":3,"column":20,"nodeType":"31","messageId":"32","endLine":3,"endColumn":30},{"ruleId":"33","severity":1,"message":"34","line":36,"column":9,"nodeType":"35","endLine":36,"endColumn":37},"no-unused-vars","'LikeButton' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]